using System.Collections;
using System.Collections.Generic;
using UnityEngine;

namespace Chess.AI
{
    public static class BoardStateEvaluator
    {
        static readonly Dictionary<Figure, int> pieceValues = new Dictionary<Figure, int>()
    {
        { Figure.Empty, 0 },
        { Figure.PawnWhite, 100 }, { Figure.HorseWhite, 320 }, { Figure.BishopWhite, 330 },
        { Figure.CastleWhite, 500 }, { Figure.QueenWhite, 900 }, { Figure.KingWhite, 20000 },
        { Figure.PawnBlack, -100 }, { Figure.HorseBlack, -320 }, { Figure.BishopBlack, -330 },
        { Figure.CastleBlack, -500 }, { Figure.QueenBlack, -900 }, { Figure.KingBlack, -20000 },
    };

        static readonly Dictionary<Figure, int[,]> positionBonusValues = new Dictionary<Figure, int[,]>()
    {
        { Figure.Empty, new int[8,8] {
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   0,   0,   0,   0,   0,   0,   0,   0 }
            }
        },
        { Figure.PawnWhite, new int[8,8] {
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {   5,  10,  10, -25, -25,  10,  10,   5 },
                {   5,  -5, -10,   0,   0, -10,  -5,   5 },
                {   0,   0,   0,  25,  25,   0,   0,   0 },
                {   5,   5,  10,  28,  28,  10,   5,   5 },
                {  10,  10,  20,  30,  30,  20,  10,  10 },
                {  50,  50,  50,  50,  50,  50,  50,  50 },
                {   0,   0,   0,   0,   0,   0,   0,   0 }
            }
        },
        { Figure.PawnBlack, new int[8,8] {
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                { -50, -50, -50, -50, -50, -50, -50, -50 },
                { -10, -10, -20, -30, -30, -20, -10, -10 },
                {  -5,  -5, -10, -28, -28, -10,  -5,  -5 },
                {   0,   0,   0, -25, -25,   0,   0,   0 },
                {  -5,   5,  10,   0,   0,  10,   5,  -5 },
                {  -5, -10, -10,  25,  25, -10, -10,  -5 },
                {   0,   0,   0,   0,   0,   0,   0,   0 }
            }
        },
        { Figure.HorseWhite, new int[8,8] {
                { -50, -40, -30, -30, -30, -30, -40, -50 },
                { -40, -20,   0,   5,   5,   0, -20, -40 },
                { -30,   5,  10,  15,  15,  10,   5, -30 },
                { -30,   0,  15,  20,  20,  15,   0, -30 },
                { -30,   5,  15,  20,  20,  15,   5, -30 },
                { -30,   0,  10,  15,  15,  10,   0, -30 },
                { -40, -20,   0,   0,   0,   0, -20, -40 },
                { -50, -40, -30, -30, -30, -30, -40, -50 },
            }
        },
        { Figure.HorseBlack, new int[8,8] {
                {  50,  40,  30,  30,  30,  30,  40,  50 },
                {  40,  20,   0,   0,   0,   0,  20,  40 },
                {  30,  -5, -10, -15, -15, -10,  -5,  30 },
                {  30,   0, -15, -20, -20, -15,  -0,  30 },
                {  30,  -5, -15, -20, -20, -15,  -5,  30 },
                {  30,   0, -10, -15, -15, -10,  -0,  30 },
                {  40,  20,   0,  -5,  -5,   0,  20,  40 },
                {  50,  40,  30,  30,  30,  30,  40,  50 },
            }
        },
        { Figure.BishopWhite, new int[8,8] {
                { -20, -10, -10, -10, -10, -10, -10, -20 },
                { -10,   5,   0,   0,   0,   0,   5, -10 },
                { -10,  10,  10,  10,  10,  10,  10, -10 },
                { -10,   0,  10,  10,  10,  10,   0, -10 },
                { -10,   5,   5,  10,  10,   5,   5, -10 },
                { -10,   0,   5,  10,  10,   5,   0, -10 },
                { -10,   0,   0,   0,   0,   0,   0, -10 },
                { -20, -10, -10, -10, -10, -10, -10, -20 },
            }
        },
        { Figure.BishopBlack, new int[8,8] {
                {  20,  10,  10,  10,  10,  10,  10,  20 },
                {  10,   0,   0,   0,   0,   0,   0,  10 },
                {  10,   0,  -5, -10, -10,  -5,   0,  10 },
                {  10,  -5,  -5, -10, -10,  -5,  -5,  10 },
                {  10,   0, -10, -10, -10, -10,   0,  10 },
                {  10, -10, -10, -10, -10, -10, -10,  10 },
                {  10,  -5,   0,   0,   0,   0,  -5,  10 },
                {  20,  10,  10,  10,  10,  10,  10,  20 },
            }
        },
        { Figure.CastleWhite, new int[8,8] {
                {   0,   0,   0,   9,   5,   9,   0,   0 },
                {  -5,   0,   0,   0,   0,   0,   0,  -5 },
                {  -5,   0,   0,   0,   0,   0,   0,  -5 },
                {  -5,   0,   0,   0,   0,   0,   0,  -5 },
                {  -5,   0,   0,   0,   0,   0,   0,  -5 },
                {  -5,   0,   0,   0,   0,   0,   0,  -5 },
                {   5,  10,  10,  10,  10,  10,  10,   5 },
                {   0,   0,   0,   0,   0,   0,   0,   0 },
            }
        },
        { Figure.CastleBlack, new int[8,8] {
                {   0,   0,   0,   0,   0,   0,   0,   0 },
                {  -5, -10, -10, -10, -10, -10, -10,  -5 },
                {   5,   0,   0,   0,   0,   0,   0,   5 },
                {   5,   0,   0,   0,   0,   0,   0,   5 },
                {   5,   0,   0,   0,   0,   0,   0,   5 },
                {   5,   0,   0,   0,   0,   0,   0,   5 },
                {   5,   0,   0,   0,   0,   0,   0,   5 },
                {   0,   0,   0,  -9,  -5,  -9,   0,   0 },
            }
        },
        { Figure.QueenWhite, new int[8,8] {
                { -20, -10, -10,  -5,  -5, -10, -10, -20 },
                { -10,   0,   5,   0,   0,   0,   0, -10 },
                { -10,   5,   5,   5,   5,   5,   0, -10 },
                {  -5,   0,   5,   5,   5,   5,   0,  -5 },
                {  -5,   0,   5,   5,   5,   5,   0,  -5 },
                { -10,   0,   5,   5,   5,   5,   0, -10 },
                { -10,   0,   0,   0,   0,   0,   0, -10 },
                { -20, -10, -10,  -5,  -5, -10, -10, -20 },
            }
        },
        { Figure.QueenBlack, new int[8,8] {
                {  20,  10,  10,   5,   5,  10,  10,  20 },
                {  10,   0,   0,   0,   0,   0,   0,  10 },
                {  10,   0,  -5,  -5,  -5,  -5,   0,  10 },
                {   5,   0,  -5,  -5,  -5,  -5,   0,   5 },
                {   5,   0,  -5,  -5,  -5,  -5,   0,   5 },
                {  10,  -5,  -5,  -5,  -5,  -5,   0,  10 },
                {  10,   0,  -5,   0,   0,   0,   0,  10 },
                {  20,  10,  10,   5,   5,  10,  10,  20 },
            }
        },
        { Figure.KingWhite, new int[8,8] {
                {  20,  30,  30,   0,   0,  10,  30,  20 },
                {  20,  20,   0,   0,   0,   0,  20,  20 },
                { -10, -20, -20, -20, -20, -20, -20, -10 },
                { -20, -30, -30, -40, -40, -30, -30, -20 },
                { -30, -40, -40, -50, -50, -40, -40, -30 },
                { -30, -40, -40, -50, -50, -40, -40, -30 },
                { -30, -40, -40, -50, -50, -40, -40, -30 },
                { -30, -40, -40, -50, -50, -40, -40, -30 },
            }
        },
        { Figure.KingBlack, new int[8,8] {
                {  30,  40,  40,  50,  50,  40,  40,  30 },
                {  30,  40,  40,  50,  50,  40,  40,  30 },
                {  30,  40,  40,  50,  50,  40,  40,  30 },
                {  30,  40,  40,  50,  50,  40,  40,  30 },
                {  20,  30,  30,  40,  40,  30,  30,  20 },
                {  10,  20,  20,  20,  20,  20,  20,  10 },
                { -20, -20,   0,   0,   0,   0, -20, -20 },
                { -20, -30, -30,   0,   0, -10, -30, -20 },
            }
        }
    };

        public static int EvaluateRandomly(BoardState state)
        {
            return 1;
        }

        public static int EvaluateByFigures(BoardState state)
        {
            int value = 0;

            for (int x = 0; x < 8; x++) for (int y = 0; y < 8; y++) value += pieceValues[state[x, y]];

            return value;
        }

        public static int EvaluateByPosition(BoardState state)
        {
            int value = 0;

            for (int x = 0; x < 8; x++) for (int y = 0; y < 8; y++)
                    value += pieceValues[state[x, y]] + positionBonusValues[state[x, y]][y, x];

            return value;
        }
    }

    public delegate int BoardEvaluator(BoardState state);
}